/*
 ============================================================================
 Name        : convert_logfile.c
 Author      : Quoc
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int my_strcmp(char s1[], char s2[])
{
    int i = 0;
    while ( s1[i] != '\0' )
    {
        if( s2[i] == '\0' ) { return 1; }
        else if( s1[i] < s2[i] ) { return -1; }
        else if( s1[i] > s2[i] ) { return 1; }
        i++;
    }
    return 0;
}

void Processing_input(){
	 // read from below file
		   FILE * fp;

		   // Write from below file
	       FILE *f = fopen("/home/quoc/work/src/github.com/lucas-clemente/quic-go/example/log_result.txt", "w+");
	       if (f == NULL)
	       {
	           printf("Error opening file!\n");
	           exit(1);
	       }

	       // initial
		       char line[4];
			   char str1[20], str2[20], str3[20], str4[20], str5[20], str6[20];
		       size_t len = 0;
		       ssize_t read;

		       fp = fopen("/home/quoc/work/src/github.com/lucas-clemente/quic-go/example/log.txt", "r");
		       if (fp == NULL)
		           exit(EXIT_FAILURE);

		       char buff[255];
		       char check_code[5] = "2017/";
		       char checkdebug_code[6] = "DEBUG.";
		          //fscanf(fp, "%s", buff);
		          //printf("1 : %s\n", buff );
		       int count = 0;
		       while(1)
		          {
		    	   	  if(fgets(buff, 255, fp) ==NULL)
		                  break;
		              else{
		            	  // check start debug code
				          //printf("2: %s\n",buff );
				          char check_tmp[6];
				          strncpy(check_tmp, buff,5);
				          //printf("2: %s\n",check_tmp);
				          check_tmp[6] = '\0';
				          //printf("%d\n", my_strcmp(tmp,check_code) );
				          /*if (my_strcmp(check_tmp,check_code) == 0 )
				          {
				        	  fprintf(f,"-------------------------------------------------------------------------\n");
					          fprintf(f,"-------------			chunk number %d \n",count);
					          fprintf(f,"-------------------------------------------------------------------------\n");
					          count = count + 1;
				          }*/

				          //printf("2: %s\n",buff );
				          char tmp[6];
				          strncpy(tmp, buff,5);

					      char r_buff[255];
				          tmp[6] = '\0';
				          //printf("%d\n", my_strcmp(tmp,check_code) );
				          //printf("debug code 1 \n");
				          if (my_strcmp(tmp,check_code) == 0 )
				          {
				        	  //printf("debug code 2 \n");
				        	  int i, j;
				        	  for(j = 0; j< 20; j++)
				        	  {
				        	  for(i = 0; (buff[i] != '\0' || i < 15); ++i)
				        	      {
				        		  	  buff[i] = buff[i+1];
				        	      }
				        	  }
					          fprintf(f,buff);
				          }

		              }

		          }

		          fclose(f);
		          fclose(fp);
}

void Convert(){
	// read from below file
			   FILE * fp;

			   // Write from below file
		       FILE *f = fopen("/home/quoc/work/src/github.com/lucas-clemente/quic-go/example/result.txt", "w+");
		       if (f == NULL)
		       {
		           printf("Error opening file!\n");
		           exit(1);
		       }

		       // initial
			       char line[4];
				   char str1[20], str2[20], str3[20], str4[20], str5[20], str6[20];
			       size_t len = 0;
			       ssize_t read;

			       fp = fopen("/home/quoc/work/src/github.com/lucas-clemente/quic-go/example/log_result.txt", "r");
			       if (fp == NULL)
			           exit(EXIT_FAILURE);

			       char buff[255];
			       char check_code[5] = "2017/";
			       char checkdebug_code[6] = "DEBUG.";
			          //fscanf(fp, "%s", buff);
			          //printf("1 : %s\n", buff );
			       int count = 0;
			       int value[1000];
			       while(1)
			          {
			    	   	  if(fgets(buff, 255, fp) ==NULL)
			                  break;
			              else{
			            	  // check start debug code
					          //printf("2: %s\n",buff );
					          char check_tmp[6];
					          strncpy(check_tmp, buff,5);
					          //printf("2: %s\n",check_tmp);
					          check_tmp[6] = '\0';
					          //printf("%d\n", my_strcmp(tmp,check_code) );
					          /*if (my_strcmp(check_tmp,check_code) == 0 )
					          {
					        	  fprintf(f,"-------------------------------------------------------------------------\n");
						          fprintf(f,"-------------			chunk number %d \n",count);
						          fprintf(f,"-------------------------------------------------------------------------\n");
						          count = count + 1;
					          }*/

					          //printf("2: %s\n",buff );
					          char tmp[6];
					          strncpy(tmp, buff,5);

						      char r_buff[255];
					          tmp[6] = '\0';
					          //printf("%d\n", my_strcmp(tmp,check_code) );
					          printf("debug code 1 %c\n",buff[7]);
					          if (buff[7] == '<' && buff[8] == '-'  )
					          {
						          fprintf(f,buff);
					          }

			              }

			          }

			          fclose(f);
			          fclose(fp);

}
int main(void) {
	Processing_input();
	Convert();
	return 0;
}

	    //   char startcode[5] = "Start";
/*
	       while ((read = getline(&line, &len, fp)) != -1) {
	           //printf("Retrieved line of length %zu :\n", read);
	    	   char test[255];
	    	   strcpy(test, line);
	           printf("%s", test);
	    	  if (test == "Start check pointing\n")
	    		   fprintf(f, "%s","-----------------------------------------------");
	    	  if (test[0] == "0")
	    	  {
	    				   fprintf(f, "%s",line);
	    	  printf("%s", line);
	    	  }
	    	   }
	    	   */
	       //fscanf(fp, "%s", line);
	       //printf("%s",line);
	      /* while(!feof(fp) ){
	    	   fscanf(fp, "%s", line);
	              //printf("%s",line);
	              //fprintf(f,"%s\n",line);
	              //int value = my_strcmp (line,"Start");
	              if (my_strcmp (line,"Start") == 0){
	            	fprintf(f,"%s \n", "-----------------");
	            	printf("%s \n", "-----------------");
	              }
	              else if (my_strcmp (line,"01.") == 0){
	            	  int num;
	            	  int int_num;
	            	  fscanf(fp, "%s %s %s %s %s %s", str1, str2, str3, str4, str5, str6 );
	            	  //fscanf(fp, "%s %s", str1, str2);
		    		  fprintf(f, "%x \t %d \n",num, int_num);
		    		  //printf("%s", line);
		    	  }
	              else if (my_strcmp (line,"11.") == 0){
	            	            	  int num, num1;
	            	            	  int int_num;
	            	            	  fscanf(fp, "%s \t %s \t %d \t %x \t %s \t %s \t %d", str1, str2, num,num1, str3, str4, int_num );
	            		    		  fprintf(f, "%x \t %d \n",num, int_num);
	            		    		  //printf("%s", line);
	            		    	  }*/
	         // }
	       //01. max_bitrate value 0  	 in integer 0

	       // close the file after read
	       //fclose(fp);
	       /*if (line)
	           free(line);
	       exit(EXIT_SUCCESS);*/

	       // close the file after write
	       //fclose(f);
